name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  STACK_NAME: job-board

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: hello-world/package-lock.json
        
    - name: Install dependencies
      run: |
        cd hello-world
        npm ci
        
    - name: Run tests
      run: |
        cd hello-world
        npm test
        
    - name: Run linting
      run: |
        cd hello-world
        npm run lint || echo "Linting not configured yet"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: hello-world/package-lock.json
        
    - name: Install dependencies
      run: |
        cd hello-world
        npm ci
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      
    - name: Build SAM application
      run: sam build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sam-build
        path: .aws-sam/

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: sam-build
        path: .aws-sam/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      
    - name: Deploy to AWS
      run: |
        sam deploy \
          --stack-name ${{ env.STACK_NAME }} \
          --capabilities CAPABILITY_IAM \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset
          
    - name: Get API Gateway URL
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`JobBoardApi`].OutputValue' \
          --output text)
        echo "API_URL=$API_URL" >> $GITHUB_ENV
        
    - name: Test deployed API
      run: |
        sleep 30  # Wait for deployment to stabilize
        curl -f "${{ env.API_URL }}health" || echo "Health check failed"
        
    - name: Comment deployment info
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Deployment Successful!**
          
          **API Gateway URL:** ${{ env.API_URL }}
          **Stack Name:** ${{ env.STACK_NAME }}
          **Region:** ${{ env.AWS_REGION }}
          
          Test the API: \`curl ${{ env.API_URL }}health\`
          
          [View CloudFormation Stack](https://console.aws.amazon.com/cloudformation/home?region=${{ env.AWS_REGION }}#/stacks/stackinfo?stackId=${{ env.STACK_NAME }})`
          })
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' 